// Generated by gencpp from file lane_follower/VeronicaStatusReport.msg
// DO NOT EDIT!


#ifndef LANE_FOLLOWER_MESSAGE_VERONICASTATUSREPORT_H
#define LANE_FOLLOWER_MESSAGE_VERONICASTATUSREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lane_follower
{
template <class ContainerAllocator>
struct VeronicaStatusReport_
{
  typedef VeronicaStatusReport_<ContainerAllocator> Type;

  VeronicaStatusReport_()
    : IMU_STATUS(false)
    , CAMERA_STATUS(false)
    , GPS_STATUS(false)
    , LIDAR_STATUS(false)
    , MOTOR_DRIVER_STATUS(false)  {
    }
  VeronicaStatusReport_(const ContainerAllocator& _alloc)
    : IMU_STATUS(false)
    , CAMERA_STATUS(false)
    , GPS_STATUS(false)
    , LIDAR_STATUS(false)
    , MOTOR_DRIVER_STATUS(false)  {
  (void)_alloc;
    }



   typedef uint8_t _IMU_STATUS_type;
  _IMU_STATUS_type IMU_STATUS;

   typedef uint8_t _CAMERA_STATUS_type;
  _CAMERA_STATUS_type CAMERA_STATUS;

   typedef uint8_t _GPS_STATUS_type;
  _GPS_STATUS_type GPS_STATUS;

   typedef uint8_t _LIDAR_STATUS_type;
  _LIDAR_STATUS_type LIDAR_STATUS;

   typedef uint8_t _MOTOR_DRIVER_STATUS_type;
  _MOTOR_DRIVER_STATUS_type MOTOR_DRIVER_STATUS;





  typedef boost::shared_ptr< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> const> ConstPtr;

}; // struct VeronicaStatusReport_

typedef ::lane_follower::VeronicaStatusReport_<std::allocator<void> > VeronicaStatusReport;

typedef boost::shared_ptr< ::lane_follower::VeronicaStatusReport > VeronicaStatusReportPtr;
typedef boost::shared_ptr< ::lane_follower::VeronicaStatusReport const> VeronicaStatusReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lane_follower::VeronicaStatusReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lane_follower::VeronicaStatusReport_<ContainerAllocator1> & lhs, const ::lane_follower::VeronicaStatusReport_<ContainerAllocator2> & rhs)
{
  return lhs.IMU_STATUS == rhs.IMU_STATUS &&
    lhs.CAMERA_STATUS == rhs.CAMERA_STATUS &&
    lhs.GPS_STATUS == rhs.GPS_STATUS &&
    lhs.LIDAR_STATUS == rhs.LIDAR_STATUS &&
    lhs.MOTOR_DRIVER_STATUS == rhs.MOTOR_DRIVER_STATUS;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lane_follower::VeronicaStatusReport_<ContainerAllocator1> & lhs, const ::lane_follower::VeronicaStatusReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lane_follower

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91482b64151ad166efd0cf38c80d57a6";
  }

  static const char* value(const ::lane_follower::VeronicaStatusReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91482b64151ad166ULL;
  static const uint64_t static_value2 = 0xefd0cf38c80d57a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane_follower/VeronicaStatusReport";
  }

  static const char* value(const ::lane_follower::VeronicaStatusReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool IMU_STATUS\n"
"bool CAMERA_STATUS\n"
"bool GPS_STATUS\n"
"bool LIDAR_STATUS\n"
"bool MOTOR_DRIVER_STATUS\n"
"\n"
;
  }

  static const char* value(const ::lane_follower::VeronicaStatusReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IMU_STATUS);
      stream.next(m.CAMERA_STATUS);
      stream.next(m.GPS_STATUS);
      stream.next(m.LIDAR_STATUS);
      stream.next(m.MOTOR_DRIVER_STATUS);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VeronicaStatusReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lane_follower::VeronicaStatusReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lane_follower::VeronicaStatusReport_<ContainerAllocator>& v)
  {
    s << indent << "IMU_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IMU_STATUS);
    s << indent << "CAMERA_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CAMERA_STATUS);
    s << indent << "GPS_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GPS_STATUS);
    s << indent << "LIDAR_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LIDAR_STATUS);
    s << indent << "MOTOR_DRIVER_STATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MOTOR_DRIVER_STATUS);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANE_FOLLOWER_MESSAGE_VERONICASTATUSREPORT_H
